\documentclass{article}

\begin{document}

\section{Executive Summary}

Approaches for creating interactive data visualisations have gained momentum in the present day. However many of these existing tools are limited in achieving interactivity on larger datasets and cannot handle more complex tasks such as customisation, querying and linking between different views of data. By using more flexible tools, we hope to combat these limitations and potentially create more impactful and fluid interactions for users to help them explore data from their own perspective.

\section{Introduction}

The purpose of this report is to investigate current solutions for creating interactive data visualisations in R that can be accessible through the web. Interactive visualisations help inform and explain our data beyond static plots. We aim to identify key similarities and differences between existing tools and find ways to meet user needs.

\subsection{Why web-interactive?}
Interactive plots allow users to explore the data freely. Though it may be presented in a more visually appealing way, it may help explain a topic to a more general audience. As Murray (2012) suggests, static visualisations can only 'offer precomposed 'views' of data', where as interactive plots can provide us with different perspectives. To share our views and findings more easily, the web provides an ideal platform for communicating and exchanging information. It has become accessible to everyone without worrying about technical issues such as device compatibility and installation. We find web interactive visualisations are commonly used in teaching statistics, education, data journalism and is likely to continue to be demanded for in the future. 

\section{Existing tools for creating interactive plots}
Existing tools for creating fast web interactive plots in R can generally be classified as a class of R packages known as HTMLwidgets. For tools that do not follow that class, the ggvis and the Shiny package are popular alternatives where interactivity is driven in R. These will be discussed along with the limitations they hold.

\subsection{HTMLWidgets}
An HTMLWidget is an R package that allows users to have access to an existing javascript library through bindings between defined R functions and the JavaScript library (RStudio, 2014). These HTMLwidgets can serve different purposes depending on what the original javascript library does, such as Highcharter(Kunst, 2017) and rbokeh(Hafen, 2014) that generates plots using the HighCharters.js API (Highcharts) and the Bokeh.js API respectively, DataTable(SpryMedia Limited and RStudio, 2016) that generates interactive tables, and Leafet for interactive maps. \\

The main HTMLwidget package that we have looked at in detail is plotly as it has focused on incorporating interactivity on a wide range of plots and is compatible with r packages Shiny and crosstalk (more details are discussed below).

\subsubsection{Plotly}
Plotly is a graphing library that uses the Plotly.JS API (Plotly Technologies, 2017) that is built upon D3. It is powerful in the sense that it can convert plots rendered in ggplot2 into interactive plots. It provides basic interactivity including tooltips, zooming and panning, selection of points, and subsetting of groups of data through its legend. We can also create and combine plots together, using the subplot() function, allowing users to create facetted plots manually.

\subsection{ggvis}
Another common data visualisation package is ggvis(Wickham, Chang 2016). This package utilises the Vega JavaScript library to render its plots but also uses Shiny to drive some of its interaction. These plots follow the "Grammar of Graphics" and aim to be an interactive visualisation tool for exploratory analysis. This package has an advantage over htmlwidgets, as it also expands upon using statistical functions for plotting, such as layer_model_predictions() for drawing trendlines using statistical modelling (see Figure 3). Furthermore, because some of the interactions are driven by Shiny, we can add 'inputs' that look similar to Shiny such as sliders and checkboxes to control and filter the plot, but also have the power to add tooltips.

However, we are limited to basic interactivity as we are not able to link layers of plot objects together. Furthermore, ggvis plots are fundamentally slow when it comes to rendering plots with several data points as the DOM cannot handle several SVG elements at once (Chang, 2014). To date, the ggvis package is still under development, with more features to come in the near future.


\subsection{Shiny}

\subsubsection{Shiny}

\section{Conclusion}


\end{document}