<?xml version="1.0" encoding="ISO8859-1"?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="861px" height="553px" viewBox="0 0 861 553" version="1.1">
  <metadata xmlns:gridsvg="http://www.stat.auckland.ac.nz/~paul/R/gridSVG/">
    <gridsvg:generator name="gridSVG" version="1.5-1" time="2017-05-24 10:35:21"/>
    <gridsvg:argument name="name" value="axes.svg"/>
    <gridsvg:argument name="exportCoords" value="inline"/>
    <gridsvg:argument name="exportMappings" value="inline"/>
    <gridsvg:argument name="exportJS" value="inline"/>
    <gridsvg:argument name="res" value="96"/>
    <gridsvg:argument name="prefix" value=""/>
    <gridsvg:argument name="addClasses" value="FALSE"/>
    <gridsvg:argument name="indent" value="TRUE"/>
    <gridsvg:argument name="htmlWrapper" value="FALSE"/>
    <gridsvg:argument name="usePaths" value="vpPaths"/>
    <gridsvg:argument name="uniqueNames" value="TRUE"/>
    <gridsvg:separator name="id.sep" value="."/>
    <gridsvg:separator name="gPath.sep" value="::"/>
    <gridsvg:separator name="vpPath.sep" value="::"/>
  </metadata>
  <script type="application/ecmascript"><![CDATA[
var gridSVGCoords = {"ROOT":{"x":[0],"y":[0],"width":[861],"height":[553],"angle":[0],"xscale":[0,861],"yscale":[553,0],"inch":[96]},"graphics-root.1":{"x":[0],"y":[0],"width":[861],"height":[553],"angle":[0],"xscale":[0,1],"yscale":[0,1],"inch":[96]},"graphics-root.2":{"x":[0],"y":[0],"width":[861],"height":[553],"angle":[0],"xscale":[0,1],"yscale":[0,1],"inch":[96]},"graphics-root::graphics-inner.1":{"x":[0],"y":[0],"width":[861],"height":[553],"angle":[0],"xscale":[0,1],"yscale":[0,1],"inch":[96]},"graphics-root.3":{"x":[0],"y":[0],"width":[861],"height":[553],"angle":[0],"xscale":[0,1],"yscale":[0,1],"inch":[96]},"graphics-root::graphics-inner.2":{"x":[0],"y":[0],"width":[861],"height":[553],"angle":[0],"xscale":[0,1],"yscale":[0,1],"inch":[96]},"graphics-root::graphics-inner::graphics-figure-1.1":{"x":[0],"y":[0],"width":[861],"height":[553],"angle":[0],"xscale":[0,1],"yscale":[0,1],"inch":[96]},"graphics-root::graphics-inner::graphics-figure-1-clip.1":{"x":[0],"y":[0],"width":[861],"height":[553],"angle":[0],"xscale":[0,1],"yscale":[0,1],"inch":[96]},"graphics-root.4":{"x":[0],"y":[0],"width":[861],"height":[553],"angle":[0],"xscale":[0,1],"yscale":[0,1],"inch":[96]},"graphics-root::graphics-inner.3":{"x":[0],"y":[0],"width":[861],"height":[553],"angle":[0],"xscale":[0,1],"yscale":[0,1],"inch":[96]},"graphics-root::graphics-inner::graphics-figure-1.2":{"x":[0],"y":[0],"width":[861],"height":[553],"angle":[0],"xscale":[0,1],"yscale":[0,1],"inch":[96]},"graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1.1":{"x":[78.72],"y":[97.92],"width":[741.96],"height":[376.36],"angle":[0],"xscale":[0,1],"yscale":[0,1],"inch":[96]},"graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1-clip.1":{"x":[78.72],"y":[97.92],"width":[741.96],"height":[376.36],"angle":[0],"xscale":[0,1],"yscale":[0,1],"inch":[96]},"graphics-root::graphics-inner::graphics-figure-1-clip.2":{"x":[0],"y":[0],"width":[861],"height":[553],"angle":[0],"xscale":[0,1],"yscale":[0,1],"inch":[96]},"graphics-root::graphics-inner::graphics-figure-1-clip::graphics-plot-1.1":{"x":[78.72],"y":[97.92],"width":[741.96],"height":[376.36],"angle":[0],"xscale":[0,1],"yscale":[0,1],"inch":[96]},"graphics-root.5":{"x":[0],"y":[0],"width":[861],"height":[553],"angle":[0],"xscale":[0,1],"yscale":[0,1],"inch":[96]},"graphics-root::graphics-inner.4":{"x":[0],"y":[0],"width":[861],"height":[553],"angle":[0],"xscale":[0,1],"yscale":[0,1],"inch":[96]},"graphics-root::graphics-inner::graphics-figure-1.3":{"x":[0],"y":[0],"width":[861],"height":[553],"angle":[0],"xscale":[0,1],"yscale":[0,1],"inch":[96]},"graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1.2":{"x":[78.72],"y":[97.92],"width":[741.96],"height":[376.36],"angle":[0],"xscale":[0,1],"yscale":[0,1],"inch":[96]},"graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1::graphics-window-1-0.1":{"x":[78.72],"y":[97.92],"width":[741.96],"height":[376.36],"angle":[0],"xscale":[-0.04,1.04],"yscale":[-0.04,1.04],"inch":[96]},"graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1-clip.2":{"x":[78.72],"y":[97.92],"width":[741.96],"height":[376.36],"angle":[0],"xscale":[0,1],"yscale":[0,1],"inch":[96]},"graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1-clip::graphics-window-1-0.1":{"x":[78.72],"y":[97.92],"width":[741.96],"height":[376.36],"angle":[0],"xscale":[-0.04,1.04],"yscale":[-0.04,1.04],"inch":[96]},"graphics-root::graphics-inner::graphics-figure-1-clip.3":{"x":[0],"y":[0],"width":[861],"height":[553],"angle":[0],"xscale":[0,1],"yscale":[0,1],"inch":[96]},"graphics-root::graphics-inner::graphics-figure-1-clip::graphics-plot-1.2":{"x":[78.72],"y":[97.92],"width":[741.96],"height":[376.36],"angle":[0],"xscale":[0,1],"yscale":[0,1],"inch":[96]},"graphics-root::graphics-inner::graphics-figure-1-clip::graphics-plot-1::graphics-window-1-0.1":{"x":[78.72],"y":[97.92],"width":[741.96],"height":[376.36],"angle":[0],"xscale":[-0.04,1.04],"yscale":[-0.04,1.04],"inch":[96]},"graphics-root.6":{"x":[0],"y":[0],"width":[861],"height":[553],"angle":[0],"xscale":[0,1],"yscale":[0,1],"inch":[96]},"graphics-root::graphics-inner.5":{"x":[0],"y":[0],"width":[861],"height":[553],"angle":[0],"xscale":[0,1],"yscale":[0,1],"inch":[96]},"graphics-root::graphics-inner::graphics-figure-1.4":{"x":[0],"y":[0],"width":[861],"height":[553],"angle":[0],"xscale":[0,1],"yscale":[0,1],"inch":[96]},"graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1.3":{"x":[78.72],"y":[97.92],"width":[741.96],"height":[376.36],"angle":[0],"xscale":[0,1],"yscale":[0,1],"inch":[96]},"graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1::graphics-window-1-1.1":{"x":[78.72],"y":[97.92],"width":[741.96],"height":[376.36],"angle":[0],"xscale":[-6.52,169.52],"yscale":[-388.4,10098.4],"inch":[96]},"graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1-clip.3":{"x":[78.72],"y":[97.92],"width":[741.96],"height":[376.36],"angle":[0],"xscale":[0,1],"yscale":[0,1],"inch":[96]},"graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1-clip::graphics-window-1-1.1":{"x":[78.72],"y":[97.92],"width":[741.96],"height":[376.36],"angle":[0],"xscale":[-6.52,169.52],"yscale":[-388.4,10098.4],"inch":[96]},"graphics-root::graphics-inner::graphics-figure-1-clip.4":{"x":[0],"y":[0],"width":[861],"height":[553],"angle":[0],"xscale":[0,1],"yscale":[0,1],"inch":[96]},"graphics-root::graphics-inner::graphics-figure-1-clip::graphics-plot-1.3":{"x":[78.72],"y":[97.92],"width":[741.96],"height":[376.36],"angle":[0],"xscale":[0,1],"yscale":[0,1],"inch":[96]},"graphics-root::graphics-inner::graphics-figure-1-clip::graphics-plot-1::graphics-window-1-1.1":{"x":[78.72],"y":[97.92],"width":[741.96],"height":[376.36],"angle":[0],"xscale":[-6.52,169.52],"yscale":[-388.4,10098.4],"inch":[96]},"graphics-root.7":{"x":[0],"y":[0],"width":[861],"height":[553],"angle":[0],"xscale":[0,1],"yscale":[0,1],"inch":[96]},"graphics-root::graphics-inner.6":{"x":[0],"y":[0],"width":[861],"height":[553],"angle":[0],"xscale":[0,1],"yscale":[0,1],"inch":[96]},"graphics-root::graphics-inner::graphics-figure-1.5":{"x":[0],"y":[0],"width":[861],"height":[553],"angle":[0],"xscale":[0,1],"yscale":[0,1],"inch":[96]},"graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1-clip.4":{"x":[78.72],"y":[97.92],"width":[741.96],"height":[376.36],"angle":[0],"xscale":[0,1],"yscale":[0,1],"inch":[96]},"graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1-clip::graphics-window-1-1.2":{"x":[78.72],"y":[97.92],"width":[741.96],"height":[376.36],"angle":[0],"xscale":[-6.52,169.52],"yscale":[-388.4,10098.4],"inch":[96]},"graphics-root.8":{"x":[0],"y":[0],"width":[861],"height":[553],"angle":[0],"xscale":[0,1],"yscale":[0,1],"inch":[96]},"graphics-root::graphics-inner.7":{"x":[0],"y":[0],"width":[861],"height":[553],"angle":[0],"xscale":[0,1],"yscale":[0,1],"inch":[96]},"graphics-root::graphics-inner::graphics-figure-1.6":{"x":[0],"y":[0],"width":[861],"height":[553],"angle":[0],"xscale":[0,1],"yscale":[0,1],"inch":[96]},"graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1.4":{"x":[78.72],"y":[97.92],"width":[741.96],"height":[376.36],"angle":[0],"xscale":[0,1],"yscale":[0,1],"inch":[96]},"graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1::graphics-window-1-1.2":{"x":[78.72],"y":[97.92],"width":[741.96],"height":[376.36],"angle":[0],"xscale":[-6.52,169.52],"yscale":[-388.4,10098.4],"inch":[96]},"graphics-root.9":{"x":[0],"y":[0],"width":[861],"height":[553],"angle":[0],"xscale":[0,1],"yscale":[0,1],"inch":[96]},"graphics-root::graphics-inner.8":{"x":[0],"y":[0],"width":[861],"height":[553],"angle":[0],"xscale":[0,1],"yscale":[0,1],"inch":[96]},"graphics-root::graphics-inner::graphics-figure-1.7":{"x":[0],"y":[0],"width":[861],"height":[553],"angle":[0],"xscale":[0,1],"yscale":[0,1],"inch":[96]},"graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1.5":{"x":[78.72],"y":[97.92],"width":[741.96],"height":[376.36],"angle":[0],"xscale":[0,1],"yscale":[0,1],"inch":[96]},"graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1::graphics-window-1-1.3":{"x":[78.72],"y":[97.92],"width":[741.96],"height":[376.36],"angle":[0],"xscale":[-6.52,169.52],"yscale":[-388.4,10098.4],"inch":[96]},"graphics-root.10":{"x":[0],"y":[0],"width":[861],"height":[553],"angle":[0],"xscale":[0,1],"yscale":[0,1],"inch":[96]},"graphics-root::graphics-inner.9":{"x":[0],"y":[0],"width":[861],"height":[553],"angle":[0],"xscale":[0,1],"yscale":[0,1],"inch":[96]},"graphics-root::graphics-inner::graphics-figure-1.8":{"x":[0],"y":[0],"width":[861],"height":[553],"angle":[0],"xscale":[0,1],"yscale":[0,1],"inch":[96]},"graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1.6":{"x":[78.72],"y":[97.92],"width":[741.96],"height":[376.36],"angle":[0],"xscale":[0,1],"yscale":[0,1],"inch":[96]},"graphics-root.11":{"x":[0],"y":[0],"width":[861],"height":[553],"angle":[0],"xscale":[0,1],"yscale":[0,1],"inch":[96]},"graphics-root::graphics-inner.10":{"x":[0],"y":[0],"width":[861],"height":[553],"angle":[0],"xscale":[0,1],"yscale":[0,1],"inch":[96]},"graphics-root::graphics-inner::graphics-figure-1-clip.5":{"x":[0],"y":[0],"width":[861],"height":[553],"angle":[0],"xscale":[0,1],"yscale":[0,1],"inch":[96]},"graphics-root::graphics-inner::graphics-figure-1-clip::graphics-plot-1.4":{"x":[78.72],"y":[97.92],"width":[741.96],"height":[376.36],"angle":[0],"xscale":[0,1],"yscale":[0,1],"inch":[96]}};
]]></script>
  <script type="application/ecmascript"><![CDATA[var gridSVGMappings = {"vps":{"graphics-root":[{"suffix":1,"selector":"#graphics-root\\.1","xpath":"//*[@id='graphics-root.1']"},{"suffix":2,"selector":"#graphics-root\\.2","xpath":"//*[@id='graphics-root.2']"},{"suffix":3,"selector":"#graphics-root\\.3","xpath":"//*[@id='graphics-root.3']"},{"suffix":4,"selector":"#graphics-root\\.4","xpath":"//*[@id='graphics-root.4']"},{"suffix":5,"selector":"#graphics-root\\.5","xpath":"//*[@id='graphics-root.5']"},{"suffix":6,"selector":"#graphics-root\\.6","xpath":"//*[@id='graphics-root.6']"},{"suffix":7,"selector":"#graphics-root\\.7","xpath":"//*[@id='graphics-root.7']"},{"suffix":8,"selector":"#graphics-root\\.8","xpath":"//*[@id='graphics-root.8']"},{"suffix":9,"selector":"#graphics-root\\.9","xpath":"//*[@id='graphics-root.9']"},{"suffix":10,"selector":"#graphics-root\\.10","xpath":"//*[@id='graphics-root.10']"},{"suffix":11,"selector":"#graphics-root\\.11","xpath":"//*[@id='graphics-root.11']"}],"graphics-root::graphics-inner":[{"suffix":1,"selector":"#graphics-root\\3a \\3a graphics-inner\\.1","xpath":"//*[@id='graphics-root::graphics-inner.1']"},{"suffix":2,"selector":"#graphics-root\\3a \\3a graphics-inner\\.2","xpath":"//*[@id='graphics-root::graphics-inner.2']"},{"suffix":3,"selector":"#graphics-root\\3a \\3a graphics-inner\\.3","xpath":"//*[@id='graphics-root::graphics-inner.3']"},{"suffix":4,"selector":"#graphics-root\\3a \\3a graphics-inner\\.4","xpath":"//*[@id='graphics-root::graphics-inner.4']"},{"suffix":5,"selector":"#graphics-root\\3a \\3a graphics-inner\\.5","xpath":"//*[@id='graphics-root::graphics-inner.5']"},{"suffix":6,"selector":"#graphics-root\\3a \\3a graphics-inner\\.6","xpath":"//*[@id='graphics-root::graphics-inner.6']"},{"suffix":7,"selector":"#graphics-root\\3a \\3a graphics-inner\\.7","xpath":"//*[@id='graphics-root::graphics-inner.7']"},{"suffix":8,"selector":"#graphics-root\\3a \\3a graphics-inner\\.8","xpath":"//*[@id='graphics-root::graphics-inner.8']"},{"suffix":9,"selector":"#graphics-root\\3a \\3a graphics-inner\\.9","xpath":"//*[@id='graphics-root::graphics-inner.9']"},{"suffix":10,"selector":"#graphics-root\\3a \\3a graphics-inner\\.10","xpath":"//*[@id='graphics-root::graphics-inner.10']"}],"graphics-root::graphics-inner::graphics-figure-1":[{"suffix":1,"selector":"#graphics-root\\3a \\3a graphics-inner\\3a \\3a graphics-figure-1\\.1","xpath":"//*[@id='graphics-root::graphics-inner::graphics-figure-1.1']"},{"suffix":2,"selector":"#graphics-root\\3a \\3a graphics-inner\\3a \\3a graphics-figure-1\\.2","xpath":"//*[@id='graphics-root::graphics-inner::graphics-figure-1.2']"},{"suffix":3,"selector":"#graphics-root\\3a \\3a graphics-inner\\3a \\3a graphics-figure-1\\.3","xpath":"//*[@id='graphics-root::graphics-inner::graphics-figure-1.3']"},{"suffix":4,"selector":"#graphics-root\\3a \\3a graphics-inner\\3a \\3a graphics-figure-1\\.4","xpath":"//*[@id='graphics-root::graphics-inner::graphics-figure-1.4']"},{"suffix":5,"selector":"#graphics-root\\3a \\3a graphics-inner\\3a \\3a graphics-figure-1\\.5","xpath":"//*[@id='graphics-root::graphics-inner::graphics-figure-1.5']"},{"suffix":6,"selector":"#graphics-root\\3a \\3a graphics-inner\\3a \\3a graphics-figure-1\\.6","xpath":"//*[@id='graphics-root::graphics-inner::graphics-figure-1.6']"},{"suffix":7,"selector":"#graphics-root\\3a \\3a graphics-inner\\3a \\3a graphics-figure-1\\.7","xpath":"//*[@id='graphics-root::graphics-inner::graphics-figure-1.7']"},{"suffix":8,"selector":"#graphics-root\\3a \\3a graphics-inner\\3a \\3a graphics-figure-1\\.8","xpath":"//*[@id='graphics-root::graphics-inner::graphics-figure-1.8']"}],"graphics-root::graphics-inner::graphics-figure-1-clip":[{"suffix":1,"selector":"#graphics-root\\3a \\3a graphics-inner\\3a \\3a graphics-figure-1-clip\\.1","xpath":"//*[@id='graphics-root::graphics-inner::graphics-figure-1-clip.1']"},{"suffix":2,"selector":"#graphics-root\\3a \\3a graphics-inner\\3a \\3a graphics-figure-1-clip\\.2","xpath":"//*[@id='graphics-root::graphics-inner::graphics-figure-1-clip.2']"},{"suffix":3,"selector":"#graphics-root\\3a \\3a graphics-inner\\3a \\3a graphics-figure-1-clip\\.3","xpath":"//*[@id='graphics-root::graphics-inner::graphics-figure-1-clip.3']"},{"suffix":4,"selector":"#graphics-root\\3a \\3a graphics-inner\\3a \\3a graphics-figure-1-clip\\.4","xpath":"//*[@id='graphics-root::graphics-inner::graphics-figure-1-clip.4']"},{"suffix":5,"selector":"#graphics-root\\3a \\3a graphics-inner\\3a \\3a graphics-figure-1-clip\\.5","xpath":"//*[@id='graphics-root::graphics-inner::graphics-figure-1-clip.5']"}],"graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1":[{"suffix":1,"selector":"#graphics-root\\3a \\3a graphics-inner\\3a \\3a graphics-figure-1\\3a \\3a graphics-plot-1\\.1","xpath":"//*[@id='graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1.1']"},{"suffix":2,"selector":"#graphics-root\\3a \\3a graphics-inner\\3a \\3a graphics-figure-1\\3a \\3a graphics-plot-1\\.2","xpath":"//*[@id='graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1.2']"},{"suffix":3,"selector":"#graphics-root\\3a \\3a graphics-inner\\3a \\3a graphics-figure-1\\3a \\3a graphics-plot-1\\.3","xpath":"//*[@id='graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1.3']"},{"suffix":4,"selector":"#graphics-root\\3a \\3a graphics-inner\\3a \\3a graphics-figure-1\\3a \\3a graphics-plot-1\\.4","xpath":"//*[@id='graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1.4']"},{"suffix":5,"selector":"#graphics-root\\3a \\3a graphics-inner\\3a \\3a graphics-figure-1\\3a \\3a graphics-plot-1\\.5","xpath":"//*[@id='graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1.5']"},{"suffix":6,"selector":"#graphics-root\\3a \\3a graphics-inner\\3a \\3a graphics-figure-1\\3a \\3a graphics-plot-1\\.6","xpath":"//*[@id='graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1.6']"}],"graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1-clip":[{"suffix":1,"selector":"#graphics-root\\3a \\3a graphics-inner\\3a \\3a graphics-figure-1\\3a \\3a graphics-plot-1-clip\\.1","xpath":"//*[@id='graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1-clip.1']"},{"suffix":2,"selector":"#graphics-root\\3a \\3a graphics-inner\\3a \\3a graphics-figure-1\\3a \\3a graphics-plot-1-clip\\.2","xpath":"//*[@id='graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1-clip.2']"},{"suffix":3,"selector":"#graphics-root\\3a \\3a graphics-inner\\3a \\3a graphics-figure-1\\3a \\3a graphics-plot-1-clip\\.3","xpath":"//*[@id='graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1-clip.3']"},{"suffix":4,"selector":"#graphics-root\\3a \\3a graphics-inner\\3a \\3a graphics-figure-1\\3a \\3a graphics-plot-1-clip\\.4","xpath":"//*[@id='graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1-clip.4']"}],"graphics-root::graphics-inner::graphics-figure-1-clip::graphics-plot-1":[{"suffix":1,"selector":"#graphics-root\\3a \\3a graphics-inner\\3a \\3a graphics-figure-1-clip\\3a \\3a graphics-plot-1\\.1","xpath":"//*[@id='graphics-root::graphics-inner::graphics-figure-1-clip::graphics-plot-1.1']"},{"suffix":2,"selector":"#graphics-root\\3a \\3a graphics-inner\\3a \\3a graphics-figure-1-clip\\3a \\3a graphics-plot-1\\.2","xpath":"//*[@id='graphics-root::graphics-inner::graphics-figure-1-clip::graphics-plot-1.2']"},{"suffix":3,"selector":"#graphics-root\\3a \\3a graphics-inner\\3a \\3a graphics-figure-1-clip\\3a \\3a graphics-plot-1\\.3","xpath":"//*[@id='graphics-root::graphics-inner::graphics-figure-1-clip::graphics-plot-1.3']"},{"suffix":4,"selector":"#graphics-root\\3a \\3a graphics-inner\\3a \\3a graphics-figure-1-clip\\3a \\3a graphics-plot-1\\.4","xpath":"//*[@id='graphics-root::graphics-inner::graphics-figure-1-clip::graphics-plot-1.4']"}],"graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1::graphics-window-1-0":[{"suffix":1,"selector":"#graphics-root\\3a \\3a graphics-inner\\3a \\3a graphics-figure-1\\3a \\3a graphics-plot-1\\3a \\3a graphics-window-1-0\\.1","xpath":"//*[@id='graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1::graphics-window-1-0.1']"}],"graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1-clip::graphics-window-1-0":[{"suffix":1,"selector":"#graphics-root\\3a \\3a graphics-inner\\3a \\3a graphics-figure-1\\3a \\3a graphics-plot-1-clip\\3a \\3a graphics-window-1-0\\.1","xpath":"//*[@id='graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1-clip::graphics-window-1-0.1']"}],"graphics-root::graphics-inner::graphics-figure-1-clip::graphics-plot-1::graphics-window-1-0":[{"suffix":1,"selector":"#graphics-root\\3a \\3a graphics-inner\\3a \\3a graphics-figure-1-clip\\3a \\3a graphics-plot-1\\3a \\3a graphics-window-1-0\\.1","xpath":"//*[@id='graphics-root::graphics-inner::graphics-figure-1-clip::graphics-plot-1::graphics-window-1-0.1']"}],"graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1::graphics-window-1-1":[{"suffix":1,"selector":"#graphics-root\\3a \\3a graphics-inner\\3a \\3a graphics-figure-1\\3a \\3a graphics-plot-1\\3a \\3a graphics-window-1-1\\.1","xpath":"//*[@id='graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1::graphics-window-1-1.1']"},{"suffix":2,"selector":"#graphics-root\\3a \\3a graphics-inner\\3a \\3a graphics-figure-1\\3a \\3a graphics-plot-1\\3a \\3a graphics-window-1-1\\.2","xpath":"//*[@id='graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1::graphics-window-1-1.2']"},{"suffix":3,"selector":"#graphics-root\\3a \\3a graphics-inner\\3a \\3a graphics-figure-1\\3a \\3a graphics-plot-1\\3a \\3a graphics-window-1-1\\.3","xpath":"//*[@id='graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1::graphics-window-1-1.3']"}],"graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1-clip::graphics-window-1-1":[{"suffix":1,"selector":"#graphics-root\\3a \\3a graphics-inner\\3a \\3a graphics-figure-1\\3a \\3a graphics-plot-1-clip\\3a \\3a graphics-window-1-1\\.1","xpath":"//*[@id='graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1-clip::graphics-window-1-1.1']"},{"suffix":2,"selector":"#graphics-root\\3a \\3a graphics-inner\\3a \\3a graphics-figure-1\\3a \\3a graphics-plot-1-clip\\3a \\3a graphics-window-1-1\\.2","xpath":"//*[@id='graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1-clip::graphics-window-1-1.2']"}],"graphics-root::graphics-inner::graphics-figure-1-clip::graphics-plot-1::graphics-window-1-1":[{"suffix":1,"selector":"#graphics-root\\3a \\3a graphics-inner\\3a \\3a graphics-figure-1-clip\\3a \\3a graphics-plot-1\\3a \\3a graphics-window-1-1\\.1","xpath":"//*[@id='graphics-root::graphics-inner::graphics-figure-1-clip::graphics-plot-1::graphics-window-1-1.1']"}]},"grobs":{"graphics-background":[{"suffix":1,"selector":"#graphics-background\\.1","xpath":"//*[@id='graphics-background.1']"}],"graphics-plot-1-bottom-axis-line-1":[{"suffix":1,"selector":"#graphics-plot-1-bottom-axis-line-1\\.1","xpath":"//*[@id='graphics-plot-1-bottom-axis-line-1.1']"}],"graphics-plot-1-bottom-axis-ticks-1":[{"suffix":1,"selector":"#graphics-plot-1-bottom-axis-ticks-1\\.1","xpath":"//*[@id='graphics-plot-1-bottom-axis-ticks-1.1']"}],"graphics-plot-1-bottom-axis-labels-1":[{"suffix":1,"selector":"#graphics-plot-1-bottom-axis-labels-1\\.1","xpath":"//*[@id='graphics-plot-1-bottom-axis-labels-1.1']"}],"graphics-plot-1-left-axis-line-1":[{"suffix":1,"selector":"#graphics-plot-1-left-axis-line-1\\.1","xpath":"//*[@id='graphics-plot-1-left-axis-line-1.1']"}],"graphics-plot-1-left-axis-ticks-1":[{"suffix":1,"selector":"#graphics-plot-1-left-axis-ticks-1\\.1","xpath":"//*[@id='graphics-plot-1-left-axis-ticks-1.1']"}],"graphics-plot-1-left-axis-labels-1":[{"suffix":1,"selector":"#graphics-plot-1-left-axis-labels-1\\.1","xpath":"//*[@id='graphics-plot-1-left-axis-labels-1.1']"}],"graphics-plot-1-box-1":[{"suffix":1,"selector":"#graphics-plot-1-box-1\\.1","xpath":"//*[@id='graphics-plot-1-box-1.1']"}],"graphics-plot-1-xlab-1":[{"suffix":1,"selector":"#graphics-plot-1-xlab-1\\.1","xpath":"//*[@id='graphics-plot-1-xlab-1.1']"}],"graphics-plot-1-ylab-1":[{"suffix":1,"selector":"#graphics-plot-1-ylab-1\\.1","xpath":"//*[@id='graphics-plot-1-ylab-1.1']"}]},"refs":{},"id.sep":["."],"prefix":[""]};
]]></script>
  <script type="application/ecmascript"><![CDATA[
// Note that this code is documented using JSDoc and guided by the following URLs:
// http://code.google.com/p/jsdoc-toolkit/wiki/TagReference
// https://developers.google.com/closure/compiler/docs/js-for-compiler

// NOTE: The following code assumes that a global object, "gridSVGCoords"
//       is available. In other words, to use this code, load this object first.

/**
 * Returns a unit's x location relative to a viewport.
 *
 * @param {string} vpname The name of the viewport that the unit is drawn within
 * @param {number} x The size of the unit, based on 'from'
 * @param {string} from The input unit type
 * @param {string} to The output unit type (optional, defaults to "svg")
 * @returns {number} A unit in SVG pixels
 */
var viewportConvertX = function(vpname, x, from, to) {
    if (gridSVGCoords[vpname].angle != 0)
        throw new Error("Viewport angle non-zero; consider using viewportConvertPos()");
    if (!to)
        to = "svg";
    if (from === "svg")
        x -= gridSVGCoords[vpname].x;
    var width = convertx(vpname, x, from, to, true);
    if (to === "svg")
        width += gridSVGCoords[vpname].x;
    return roundNumber(width, 2);
};

/**
 * Returns a unit's y location relative to a viewport.
 *
 * @param {string} vpname The name of the viewport that the unit is drawn within
 * @param {number} x The size of the unit, based on 'from'
 * @param {string} from The input unit type
 * @param {string} to The output unit type (optional, defaults to "svg")
 * @returns {number} A unit in SVG pixels
 */
var viewportConvertY = function(vpname, x, from, to) {
    if (gridSVGCoords[vpname].angle != 0)
        throw new Error("Viewport angle non-zero; consider using viewportConvertPos()");
    if (!to)
        to = "svg";
    if (from == "svg")
        x -= gridSVGCoords[vpname].y;
    var height = converty(vpname, x, from, to, true);
    if (to === "svg")
        height += gridSVGCoords[vpname].y;
    return roundNumber(height, 2);
};

/**
 * Returns a unit's (x, y) location relative to a viewport.
 *
 * @param {string} vpname The name of the viewport that the unit is drawn within
 * @param {number} x The size of the x unit, based on 'from'
 * @param {number} y The size of the y unit, based on 'from'
 * @param {string} from The input unit type
 * @param {string} to The output unit type (optional, defaults to "svg")
 * @returns {Array} The converted location in SVG pixels
 */
var viewportConvertPos = function(vpname, x, y, from, to) {
    if (!to)
        to = "svg";
    if (from == "svg") {
        x -= gridSVGCoords[vpname].x;
        y -= gridSVGCoords[vpname].y;
    }
    var width = convertx(vpname, x, from, to, true);
    var height = converty(vpname, y, from, to, true);
    if (gridSVGCoords[vpname].angle != 0) {
        var theta = -gridSVGCoords[vpname].angle/180*Math.PI;
        w = Math.cos(theta)*width + Math.sin(theta)*height;
        h = -Math.sin(theta)*width + Math.cos(theta)*height;
        width = w;
        height = h;
    }
    if (to === "svg") {
        width += gridSVGCoords[vpname].x;
        height += gridSVGCoords[vpname].y;
    }
    var result = {x: width, y: height};
    return result;
};

/*
 * Helper functions
 */
convertx = function(vpname, x, from, to, loc) {
    var i = toInches(from, x,
                     gridSVGCoords[vpname].width,
                     gridSVGCoords[vpname].xscale,
                     gridSVGCoords[vpname].inch,
                     loc);
    var u = toUnit(to, i,
                   gridSVGCoords[vpname].width,
                   gridSVGCoords[vpname].xscale,
                   gridSVGCoords[vpname].inch,
                   loc);
    return u;
}

converty = function(vpname, x, from, to, loc) {
    var i = toInches(from, x,
                     gridSVGCoords[vpname].height,
                     gridSVGCoords[vpname].yscale,
                     gridSVGCoords[vpname].inch,
                     loc);
    var u = toUnit(to, i,
                   gridSVGCoords[vpname].height,
                   gridSVGCoords[vpname].yscale,
                   gridSVGCoords[vpname].inch,
                   loc);
    return u;
}

/**
 * Converts from any unit to any other unit along the both dimensions, relative to a viewport.
 *
 * @param {string} vpname The name of the viewport that the unit is drawn within
 * @param {number} w The size of the horizontal unit, based on 'from'
 * @param {number} h The size of the vertical unit, based on 'from'
 * @param {string} from The input unit type
 * @param {string} to The output unit type
 * @returns {Array} A unit in SVG pixels
 */
var viewportConvertWidth = function(vpname, x, from, to) {
    return convertx(vpname, x, from, to, false);
};

/**
 * Converts from any unit to any other unit along the vertical dimension, relative to a viewport.
 *
 * @param {string} vpname The name of the viewport that the unit is drawn within
 * @param {number} x The size of the unit, based on 'from'
 * @param {string} from The input unit type
 * @param {string} to The output unit type
 * @returns {number} A unit in SVG pixels
 */
var viewportConvertHeight = function(vpname, x, from, to) {
    return converty(vpname, x, from, to, false);
};

/**
 * Converts from any unit to any other unit along the vertical dimension, relative to a viewport.
 *
 * @param {string} vpname The name of the viewport that the unit is drawn within
 * @param {number} x The size of the unit, based on 'from'
 * @param {string} from The input unit type
 * @param {string} to The output unit type
 * @returns {Array} The converted dimensions in SVG pixels
 */
viewportConvertDim = function(vpname, w, h, from, to) {
    var wi = toInches(from, w,
                      gridSVGCoords[vpname].width,
                      gridSVGCoords[vpname].xscale,
                      gridSVGCoords[vpname].inch,
                      false);
    var hi = toInches(from, h,
                      gridSVGCoords[vpname].height,
                      gridSVGCoords[vpname].yscale,
                      gridSVGCoords[vpname].inch,
                      false);
    if (gridSVGCoords[vpname].angle != 0) {
        var theta = -gridSVGCoords[vpname].angle/180*Math.PI;
        var w = Math.cos(theta)*wi + Math.sin(theta)*hi;
        var h = -Math.sin(theta)*wi + Math.cos(theta)*hi;
        wi = w;
        hi = h;
    }
    var wu = toUnit(to, wi,
                    gridSVGCoords[vpname].width,
                    gridSVGCoords[vpname].xscale,
                    gridSVGCoords[vpname].inch,
                    false);
    var hu = toUnit(to, hi,
                    gridSVGCoords[vpname].height,
                    gridSVGCoords[vpname].yscale,
                    gridSVGCoords[vpname].inch,
                    false);
    var result = {w: wu, h: hu};
    return result;
}

/**
 * Converts from any unit to what R thought were inches.
 *
 * @param {string} from The input unit type
 * @param {number} unitValue The size of the unit, based on 'from'
 * @param {number} vpDimSize The size of the viewport that the unit belongs in, in SVG pixels
 * @param {Array.<number>} nativeScale For the given dimension that we're converting along (x or y)
 * @param {number} dimInchSize The size of an inch along this dimension
 * @param {boolean} loc  Is the conversion for a location (or a dimension)?
 * @returns {number} The input unit in inches
 */
var toInches = function(from, unitValue, vpDimSize, nativeScale,
                        dimInchSize, loc) {
    var nativeToInches = function(nativeValue, nativeScale, vpDimSize,
                                  dimInchSize, loc) {
        var dist;
        if (loc) {
            dist = nativeValue - nativeScale[0];
        } else {
            dist = nativeValue;
        }
        var nativeUnitSize = vpDimSize / Math.abs(nativeScale[1] -
                                                  nativeScale[0]);
        return dist * nativeUnitSize / dimInchSize;
    };

    var npcToInches = function(npcValue, vpDimSize, dimInchSize) {
        return (npcValue * vpDimSize) / dimInchSize;
    };

    var result;
    switch (from) {
        case "native":
            result = nativeToInches(unitValue, nativeScale, vpDimSize,
                                    dimInchSize, loc);
            break;
        case "npc":
            result = npcToInches(unitValue, vpDimSize, dimInchSize);
            break;
        case "inches":
            result = unitValue;
            break;
        case "cm":
            result = unitValue / 2.54;
            break;
        case "mm":
            result = unitValue / 25.4;
            break;
        case "points":
            result = unitValue / 72.27;
            break;
        case "picas":
            result = (unitValue * 12) / 72.27;
            break;
        case "bigpts":
            result = unitValue / 72;
            break;
        case "dida":
            result = unitValue / 1157 * 1238 / 72.27;
            break;
        case "cicero":
            result = unitValue * 12 / 1157 * 1238 / 72.27;
            break;
        case "scaledpts":
            result = unitValue / 65536 / 72.27;
            break;
        case "svg":
            result = unitValue / dimInchSize;
            break;
        default:
            console.error('Unsupported "from" unit: [%s]', from);
    }
    return result;
};

/**
 * Converts from what R thought were inches, to another unit.
 *
 * @param {string} to The desired output unit
 * @param {number} unitValue The source size in inches to be converted to another unit
 * @param {number} vpDimSize The size of the viewport that the unit belongs in, in SVG pixels
 * @param {Array.<number>} nativeScale For the given dimension that we're converting along (x or y)
 * @param {number} dimInchSize The size of an inch along this dimension
 * @param {boolean} loc  Is the conversion for a location (or a dimension)?
 * @returns {number} The input unit in 'to' units
 */
var toUnit = function(to, unitValue, vpDimSize, nativeScale, dimInchSize, loc) {
    var inchesToNative = function(inchesValue, nativeScale, vpDimSize,
                                  dimInchSize, loc) {
        var npc = (inchesValue * dimInchSize) / vpDimSize;
        var vpRange = nativeScale[1] - nativeScale[0];
        if (loc) {
            return (npc * vpRange) + nativeScale[0];
        } else {
            return (npc * vpRange);
        }
    };

    var inchesToNpc = function(inchesValue, vpDimSize, dimInchSize) {
        return (inchesValue * dimInchSize) / vpDimSize;
    };

    var result;
    switch (to) {
        case "native":
            result = inchesToNative(unitValue, nativeScale, vpDimSize,
                                    dimInchSize, loc);
            break;
        case "npc":
            result = inchesToNpc(unitValue, vpDimSize, dimInchSize);
            break;
        case "inches":
            result = unitValue;
            break;
        case "cm":
            result = unitValue * 2.54;
            break;
        case "mm":
            result = unitValue * 25.4;
            break;
        case "points":
            result = unitValue * 72.27;
            break;
        case "picas":
            result = (unitValue / 12) * 72.27;
            break;
        case "bigpts":
            result = unitValue * 72;
            break;
        case "dida":
            result = unitValue * 1157 / 1238 * 72.27;
            break;
        case "cicero":
            result = unitValue / 12 * 1157 / 1238 * 72.27;
            break;
        case "scaledpts":
            result = unitValue * 65536 * 72.27;
            break;
        case "svg":
            result = unitValue * dimInchSize;
            break;
        default:
            console.error('Unsupported "to" unit: [%s]', to);
    }
    return result;
};

/**
 * Rounds a number to a specified amount of decimal places
 *
 * @param {number} number The input number to round
 * @param {number} digits The number of decimal places to round to
 * @returns {number} The rounded number
 */
var roundNumber = function(number, digits) {
    var multiple = Math.pow(10, digits);
    var rounded = Math.round(number * multiple) / multiple;
    return rounded;
};

/**
 * Returns the name of the viewport path that a grob belongs to.
 *
 * Note that this is going to find the first matching viewport path from
 * the list of element IDs up the tree. It may end up incorrectly returning
 * a grob name instead of a viewport path in the case where a grob has the
 * same name as a viewport path.
 *
 * @param {string} grobName The name of a grob
 * @returns {string} The unique path of the viewport that the grob belongs to
 */
var grobViewport = function(grobName) {
    var grob = document.getElementById(grobName);
    if (grob) {
        var foundViewport = false;
        var viewportPath;
        var grobParent = grob.parentNode;
        while (! foundViewport) {
            var vpPath = grob.getAttribute("id");
            var testVP = gridSVGCoords[vpPath];
            // If we have found a match in our VP coordinate list we
            // have a candidate viewport path, but a grob might have
            // the same name as a viewport path...
            if (testVP) {
                viewportPath = vpPath;
                foundViewport = true;
            } else {
                grob = grobParent;
                grobParent = grob.parentNode;
            }
        }
        return viewportPath;
    } else {
        console.error("Unable to find grob [%s]", grobName);
    }
};

/**
 * Removes any empty text nodes from an XML tree.
 *
 * Often when we create XML, we use indentation to make the structure of
 * the XML document more obvious to someone who reads it.
 *
 * This is a good idea in general, but it makes parsing the DOM a bit
 * more challenging. Consider the following example:
 *
 * : <svg>
 * :     <rect ... />
 * : </svg>
 *
 * We would expect the <svg> node to have one child, when it in fact has
 * *three* child nodes. A text node, a rect node and a text node. This
 * goes against intuition so we would ideally like it so that only the
 * nodes that contain elements, such as the rect node, remain. This is
 * the purpose of this function.
 *
 * @param {Object} node An XML tree that we wish to prune
 */
var pruneTextNodes = function(node) {
    var blank = /^\s*$/;
    var child, next;
    switch (node.nodeType) {
        case 3: // Text node
            if (blank.test(node.nodeValue)) {
                node.parentNode.removeChild(node);
            }
            break;
        case 1: // Element node
        case 9: // Document node
            child = node.firstChild;
            while (child) {
                next = child.nextSibling;
                pruneTextNodes(child);
                child = next;
            }
            break;
    }
};

/**
 * Removes the numeric suffix from a viewport path.
 *
 * This function is useful in the case where we have a viewport path
 * because these paths are required to be unique. The reason for this is
 * because a viewport path can be used more than once.
 *
 * @param {string} vppath The modified and unique viewport path produced by gridSVG
 * @returns {string} The canonical viewport path, as known to grid
 */
var baseViewportPath = function(vppath) {
    var splitPath = vppath.split(".");
    // If there was actually something to split, get rid of the last value
    if (splitPath.length > 1) {
        splitPath.pop();
    }
    return splitPath.join(".");
};

/**
 * Escapes the colons present in a viewport path for use in selectors.
 *
 * Because the colon is a special character in CSS selectors, escape the
 * viewport path using this function first to ensure that the selector
 * will work as expected.
 *
 * @param {string} vppath The viewport path to escape.
 * @returns {string} An escaped viewport path, safe for use as a selector
 */
var escapeViewportPath = function(vppath) {
    return vppath.replace(/:/g, "\\:");
}

/**
 * Creates a URL for a GET/POST request. Automatically inserts separators
 * such as ?, & and =.
 *
 * @param {string} loc The location of the script to query.
 * @param {Object} params An object with keys representing GET/POST params,
 *                        and associated with their values.
 * @returns {string} The complete URL to request with.
 */
var queryBuilder = function(loc, params) {
    if (!params)
        return loc;

    var query = [];
    for (var k in params)
       query.push(encodeURIComponent(k) + "=" + encodeURIComponent(params[k]));
    var queryText = query.join("&");

    // If params is an object of length 0 we end up with ""
    if (!queryText)
        return loc;

    return loc + "?" + queryText;
}

// NOTE: The following code assumes that a global object, "gridSVGMappings"
//       is available. In other words, to use this code, load this object first.

/**
 * Returns the mapping from a known grob/viewport name to an SVG ID.
 * Assumes the variable 'gridSVGMappings' is in scope.
 *
 * @param {string} name The name of the object whose ID we are getting.
 * @param {string} type One of 'vp', 'grob' or 'ref'. Determines whether the name refers to a viewport or a grob or a reference to a defined object.
 * @param {string?} result One of 'id', 'selector' or 'xpath'. Determines the type of results we want back, i.e. SVG IDs, CSS selectors or XPath expressions.
 * @returns {Array} An array of values.
 *
 */
var getSVGMappings = function(name, type, result) {
    if (type !== "vp" && type !== "grob" && type !== "ref") {
        throw new Error("Invalid type specified. Must be one of 'vp', 'grob' or 'ref'.");
    }

    // Assume we want an ID by default, and not a selector/xpath
    if (! result) {
        result = "id";
    }

    type = type + "s";
    var obj = gridSVGMappings[type][name];
    if (! obj) {
        throw new Error("Name not found in mapping table.");
    }

    if (result === "id") {
        // Force suffix to be an array of suffixes because RJSONIO reduces
        // vectors to scalars if length(vec) == 1
        var suffix = obj.suffix;
        if (typeof suffix === "number") {
            suffix = [suffix];
        }
        var ids = [];
        for (var i = 0; i < suffix.length; i++) {
            ids.push(gridSVGMappings.prefix + name + gridSVGMappings["id.sep"] + suffix[i]);
        }
        return ids;
    }
    if (result === "selector" || result === "xpath") {
        // Force results to be an array of results because RJSONIO reduces
        // vectors to scalars if length(vec) == 1
        var vals = obj[result];
        if (typeof vals === "string") {
            vals = [vals];
        }
        return vals;
    }
};

]]></script>
  <g transform="translate(0, 553) scale(1, -1)">
    <g id="gridSVG" fill="rgb(255,255,255)" stroke="rgb(0,0,0)" stroke-dasharray="none" stroke-width="1" font-size="16" font-family="Helvetica, Arial, FreeSans, Liberation Sans, Nimbus Sans L, sans-serif" opacity="1" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-opacity="1" fill-opacity="1" font-weight="normal" font-style="normal">
      <g id="graphics-background.1">
        <rect id="graphics-background.1.1" x="-215.25" y="-138.25" width="1291.5" height="829.5" stroke="none" fill="rgb(255,255,255)" stroke-opacity="0" fill-opacity="1"/>
      </g>
      <g id="graphics-root.1"/>
      <g id="graphics-root.2">
        <g id="graphics-root::graphics-inner.1"/>
      </g>
      <g id="graphics-root.3">
        <g id="graphics-root::graphics-inner.2">
          <g id="graphics-root::graphics-inner::graphics-figure-1.1"/>
          <defs>
            <clipPath id="graphics-root::graphics-inner::graphics-figure-1-clip.1.clipPath">
              <rect x="0" y="0" width="861" height="553" fill="none" stroke="none"/>
            </clipPath>
          </defs>
          <g id="graphics-root::graphics-inner::graphics-figure-1-clip.1" clip-path="url(#graphics-root::graphics-inner::graphics-figure-1-clip.1.clipPath)"/>
        </g>
      </g>
      <g id="graphics-root.4">
        <g id="graphics-root::graphics-inner.3">
          <g id="graphics-root::graphics-inner::graphics-figure-1.2">
            <g id="graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1.1"/>
            <defs>
              <clipPath id="graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1-clip.1.clipPath">
                <rect x="78.72" y="97.92" width="741.96" height="376.36" fill="none" stroke="none"/>
              </clipPath>
            </defs>
            <g id="graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1-clip.1" clip-path="url(#graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1-clip.1.clipPath)"/>
          </g>
          <defs>
            <clipPath id="graphics-root::graphics-inner::graphics-figure-1-clip.2.clipPath">
              <rect x="0" y="0" width="861" height="553" fill="none" stroke="none"/>
            </clipPath>
          </defs>
          <g id="graphics-root::graphics-inner::graphics-figure-1-clip.2" clip-path="url(#graphics-root::graphics-inner::graphics-figure-1-clip.2.clipPath)">
            <g id="graphics-root::graphics-inner::graphics-figure-1-clip::graphics-plot-1.1"/>
          </g>
        </g>
      </g>
      <g id="graphics-root.5">
        <g id="graphics-root::graphics-inner.4">
          <g id="graphics-root::graphics-inner::graphics-figure-1.3">
            <g id="graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1.2">
              <g id="graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1::graphics-window-1-0.1"/>
            </g>
            <defs>
              <clipPath id="graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1-clip.2.clipPath">
                <rect x="78.72" y="97.92" width="741.96" height="376.36" fill="none" stroke="none"/>
              </clipPath>
            </defs>
            <g id="graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1-clip.2" clip-path="url(#graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1-clip.2.clipPath)">
              <g id="graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1-clip::graphics-window-1-0.1"/>
            </g>
          </g>
          <defs>
            <clipPath id="graphics-root::graphics-inner::graphics-figure-1-clip.3.clipPath">
              <rect x="0" y="0" width="861" height="553" fill="none" stroke="none"/>
            </clipPath>
          </defs>
          <g id="graphics-root::graphics-inner::graphics-figure-1-clip.3" clip-path="url(#graphics-root::graphics-inner::graphics-figure-1-clip.3.clipPath)">
            <g id="graphics-root::graphics-inner::graphics-figure-1-clip::graphics-plot-1.2">
              <g id="graphics-root::graphics-inner::graphics-figure-1-clip::graphics-plot-1::graphics-window-1-0.1"/>
            </g>
          </g>
        </g>
      </g>
      <g id="graphics-root.6">
        <g id="graphics-root::graphics-inner.5">
          <g id="graphics-root::graphics-inner::graphics-figure-1.4">
            <g id="graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1.3">
              <g id="graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1::graphics-window-1-1.1"/>
            </g>
            <defs>
              <clipPath id="graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1-clip.3.clipPath">
                <rect x="78.72" y="97.92" width="741.96" height="376.36" fill="none" stroke="none"/>
              </clipPath>
            </defs>
            <g id="graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1-clip.3" clip-path="url(#graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1-clip.3.clipPath)">
              <g id="graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1-clip::graphics-window-1-1.1"/>
            </g>
          </g>
          <defs>
            <clipPath id="graphics-root::graphics-inner::graphics-figure-1-clip.4.clipPath">
              <rect x="0" y="0" width="861" height="553" fill="none" stroke="none"/>
            </clipPath>
          </defs>
          <g id="graphics-root::graphics-inner::graphics-figure-1-clip.4" clip-path="url(#graphics-root::graphics-inner::graphics-figure-1-clip.4.clipPath)">
            <g id="graphics-root::graphics-inner::graphics-figure-1-clip::graphics-plot-1.3">
              <g id="graphics-root::graphics-inner::graphics-figure-1-clip::graphics-plot-1::graphics-window-1-1.1"/>
            </g>
          </g>
        </g>
      </g>
      <g id="graphics-root.7">
        <g id="graphics-root::graphics-inner.6">
          <g id="graphics-root::graphics-inner::graphics-figure-1.5">
            <defs>
              <clipPath id="graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1-clip.4.clipPath">
                <rect x="78.72" y="97.92" width="741.96" height="376.36" fill="none" stroke="none"/>
              </clipPath>
            </defs>
            <g id="graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1-clip.4" clip-path="url(#graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1-clip.4.clipPath)">
              <g id="graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1-clip::graphics-window-1-1.2"/>
            </g>
          </g>
        </g>
      </g>
      <g id="graphics-root.8">
        <g id="graphics-root::graphics-inner.7">
          <g id="graphics-root::graphics-inner::graphics-figure-1.6">
            <g id="graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1.4">
              <g id="graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1::graphics-window-1-1.2">
                <g id="graphics-plot-1-bottom-axis-line-1.1">
                  <polyline id="graphics-plot-1-bottom-axis-line-1.1.1" points="106.2,97.92 738.41,97.92" stroke="rgb(0,0,0)" stroke-width="1" stroke-dasharray="none" stroke-linecap="round" stroke-miterlimit="10" stroke-linejoin="round" stroke-opacity="1" fill="none"/>
                </g>
                <g id="graphics-plot-1-bottom-axis-ticks-1.1">
                  <polyline id="graphics-plot-1-bottom-axis-ticks-1.1.1" points="106.2,97.92 106.2,88.32" stroke="rgb(0,0,0)" stroke-width="1" stroke-dasharray="none" stroke-linecap="round" stroke-miterlimit="10" stroke-linejoin="round" stroke-opacity="1" fill="none"/>
                  <polyline id="graphics-plot-1-bottom-axis-ticks-1.1.2" points="316.94,97.92 316.94,88.32" stroke="rgb(0,0,0)" stroke-width="1" stroke-dasharray="none" stroke-linecap="round" stroke-miterlimit="10" stroke-linejoin="round" stroke-opacity="1" fill="none"/>
                  <polyline id="graphics-plot-1-bottom-axis-ticks-1.1.3" points="527.67,97.92 527.67,88.32" stroke="rgb(0,0,0)" stroke-width="1" stroke-dasharray="none" stroke-linecap="round" stroke-miterlimit="10" stroke-linejoin="round" stroke-opacity="1" fill="none"/>
                  <polyline id="graphics-plot-1-bottom-axis-ticks-1.1.4" points="738.41,97.92 738.41,88.32" stroke="rgb(0,0,0)" stroke-width="1" stroke-dasharray="none" stroke-linecap="round" stroke-miterlimit="10" stroke-linejoin="round" stroke-opacity="1" fill="none"/>
                </g>
                <g id="graphics-plot-1-bottom-axis-labels-1.1">
                  <g id="graphics-plot-1-bottom-axis-labels-1.1.1" transform="translate(106.2, 63.36)" stroke-width="0.1">
                    <g id="graphics-plot-1-bottom-axis-labels-1.1.1.scale" transform="scale(1, -1)">
                      <text x="0" y="0" id="graphics-plot-1-bottom-axis-labels-1.1.1.text" text-anchor="middle" font-family="Helvetica, Arial, FreeSans, Liberation Sans, Nimbus Sans L, sans-serif" stroke="rgb(0,0,0)" fill="rgb(0,0,0)" stroke-opacity="1" fill-opacity="1" font-size="16" font-weight="normal" font-style="normal">
                        <tspan id="graphics-plot-1-bottom-axis-labels-1.1.1.tspan.1" dy="0" x="0">0</tspan>
                      </text>
                    </g>
                  </g>
                  <g id="graphics-plot-1-bottom-axis-labels-1.1.2" transform="translate(316.94, 63.36)" stroke-width="0.1">
                    <g id="graphics-plot-1-bottom-axis-labels-1.1.2.scale" transform="scale(1, -1)">
                      <text x="0" y="0" id="graphics-plot-1-bottom-axis-labels-1.1.2.text" text-anchor="middle" font-family="Helvetica, Arial, FreeSans, Liberation Sans, Nimbus Sans L, sans-serif" stroke="rgb(0,0,0)" fill="rgb(0,0,0)" stroke-opacity="1" fill-opacity="1" font-size="16" font-weight="normal" font-style="normal">
                        <tspan id="graphics-plot-1-bottom-axis-labels-1.1.2.tspan.1" dy="0" x="0">50</tspan>
                      </text>
                    </g>
                  </g>
                  <g id="graphics-plot-1-bottom-axis-labels-1.1.3" transform="translate(527.67, 63.36)" stroke-width="0.1">
                    <g id="graphics-plot-1-bottom-axis-labels-1.1.3.scale" transform="scale(1, -1)">
                      <text x="0" y="0" id="graphics-plot-1-bottom-axis-labels-1.1.3.text" text-anchor="middle" font-family="Helvetica, Arial, FreeSans, Liberation Sans, Nimbus Sans L, sans-serif" stroke="rgb(0,0,0)" fill="rgb(0,0,0)" stroke-opacity="1" fill-opacity="1" font-size="16" font-weight="normal" font-style="normal">
                        <tspan id="graphics-plot-1-bottom-axis-labels-1.1.3.tspan.1" dy="0" x="0">100</tspan>
                      </text>
                    </g>
                  </g>
                  <g id="graphics-plot-1-bottom-axis-labels-1.1.4" transform="translate(738.41, 63.36)" stroke-width="0.1">
                    <g id="graphics-plot-1-bottom-axis-labels-1.1.4.scale" transform="scale(1, -1)">
                      <text x="0" y="0" id="graphics-plot-1-bottom-axis-labels-1.1.4.text" text-anchor="middle" font-family="Helvetica, Arial, FreeSans, Liberation Sans, Nimbus Sans L, sans-serif" stroke="rgb(0,0,0)" fill="rgb(0,0,0)" stroke-opacity="1" fill-opacity="1" font-size="16" font-weight="normal" font-style="normal">
                        <tspan id="graphics-plot-1-bottom-axis-labels-1.1.4.tspan.1" dy="0" x="0">150</tspan>
                      </text>
                    </g>
                  </g>
                </g>
              </g>
            </g>
          </g>
        </g>
      </g>
      <g id="graphics-root.9">
        <g id="graphics-root::graphics-inner.8">
          <g id="graphics-root::graphics-inner::graphics-figure-1.7">
            <g id="graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1.5">
              <g id="graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1::graphics-window-1-1.3">
                <g id="graphics-plot-1-left-axis-line-1.1">
                  <polyline id="graphics-plot-1-left-axis-line-1.1.1" points="78.72,111.86 78.72,470.75" stroke="rgb(0,0,0)" stroke-width="1" stroke-dasharray="none" stroke-linecap="round" stroke-miterlimit="10" stroke-linejoin="round" stroke-opacity="1" fill="none"/>
                </g>
                <g id="graphics-plot-1-left-axis-ticks-1.1">
                  <polyline id="graphics-plot-1-left-axis-ticks-1.1.1" points="78.72,111.86 69.12,111.86" stroke="rgb(0,0,0)" stroke-width="1" stroke-dasharray="none" stroke-linecap="round" stroke-miterlimit="10" stroke-linejoin="round" stroke-opacity="1" fill="none"/>
                  <polyline id="graphics-plot-1-left-axis-ticks-1.1.2" points="78.72,183.64 69.12,183.64" stroke="rgb(0,0,0)" stroke-width="1" stroke-dasharray="none" stroke-linecap="round" stroke-miterlimit="10" stroke-linejoin="round" stroke-opacity="1" fill="none"/>
                  <polyline id="graphics-plot-1-left-axis-ticks-1.1.3" points="78.72,255.41 69.12,255.41" stroke="rgb(0,0,0)" stroke-width="1" stroke-dasharray="none" stroke-linecap="round" stroke-miterlimit="10" stroke-linejoin="round" stroke-opacity="1" fill="none"/>
                  <polyline id="graphics-plot-1-left-axis-ticks-1.1.4" points="78.72,327.19 69.12,327.19" stroke="rgb(0,0,0)" stroke-width="1" stroke-dasharray="none" stroke-linecap="round" stroke-miterlimit="10" stroke-linejoin="round" stroke-opacity="1" fill="none"/>
                  <polyline id="graphics-plot-1-left-axis-ticks-1.1.5" points="78.72,398.97 69.12,398.97" stroke="rgb(0,0,0)" stroke-width="1" stroke-dasharray="none" stroke-linecap="round" stroke-miterlimit="10" stroke-linejoin="round" stroke-opacity="1" fill="none"/>
                  <polyline id="graphics-plot-1-left-axis-ticks-1.1.6" points="78.72,470.75 69.12,470.75" stroke="rgb(0,0,0)" stroke-width="1" stroke-dasharray="none" stroke-linecap="round" stroke-miterlimit="10" stroke-linejoin="round" stroke-opacity="1" fill="none"/>
                </g>
                <g id="graphics-plot-1-left-axis-labels-1.1">
                  <g id="graphics-plot-1-left-axis-labels-1.1.1" transform="translate(55.68, 111.86)" stroke-width="0.1">
                    <g id="graphics-plot-1-left-axis-labels-1.1.1.scale" transform="scale(1, -1)">
                      <text x="0" y="0" id="graphics-plot-1-left-axis-labels-1.1.1.text" transform="rotate(-90)" text-anchor="middle" font-family="Helvetica, Arial, FreeSans, Liberation Sans, Nimbus Sans L, sans-serif" stroke="rgb(0,0,0)" fill="rgb(0,0,0)" stroke-opacity="1" fill-opacity="1" font-size="16" font-weight="normal" font-style="normal">
                        <tspan id="graphics-plot-1-left-axis-labels-1.1.1.tspan.1" dy="0" x="0">0</tspan>
                      </text>
                    </g>
                  </g>
                  <g id="graphics-plot-1-left-axis-labels-1.1.2" transform="translate(55.68, 183.64)" stroke-width="0.1">
                    <g id="graphics-plot-1-left-axis-labels-1.1.2.scale" transform="scale(1, -1)">
                      <text x="0" y="0" id="graphics-plot-1-left-axis-labels-1.1.2.text" transform="rotate(-90)" text-anchor="middle" font-family="Helvetica, Arial, FreeSans, Liberation Sans, Nimbus Sans L, sans-serif" stroke="rgb(0,0,0)" fill="rgb(0,0,0)" stroke-opacity="1" fill-opacity="1" font-size="16" font-weight="normal" font-style="normal">
                        <tspan id="graphics-plot-1-left-axis-labels-1.1.2.tspan.1" dy="0" x="0">2000</tspan>
                      </text>
                    </g>
                  </g>
                  <g id="graphics-plot-1-left-axis-labels-1.1.3" transform="translate(55.68, 255.41)" stroke-width="0.1">
                    <g id="graphics-plot-1-left-axis-labels-1.1.3.scale" transform="scale(1, -1)">
                      <text x="0" y="0" id="graphics-plot-1-left-axis-labels-1.1.3.text" transform="rotate(-90)" text-anchor="middle" font-family="Helvetica, Arial, FreeSans, Liberation Sans, Nimbus Sans L, sans-serif" stroke="rgb(0,0,0)" fill="rgb(0,0,0)" stroke-opacity="1" fill-opacity="1" font-size="16" font-weight="normal" font-style="normal">
                        <tspan id="graphics-plot-1-left-axis-labels-1.1.3.tspan.1" dy="0" x="0">4000</tspan>
                      </text>
                    </g>
                  </g>
                  <g id="graphics-plot-1-left-axis-labels-1.1.4" transform="translate(55.68, 327.19)" stroke-width="0.1">
                    <g id="graphics-plot-1-left-axis-labels-1.1.4.scale" transform="scale(1, -1)">
                      <text x="0" y="0" id="graphics-plot-1-left-axis-labels-1.1.4.text" transform="rotate(-90)" text-anchor="middle" font-family="Helvetica, Arial, FreeSans, Liberation Sans, Nimbus Sans L, sans-serif" stroke="rgb(0,0,0)" fill="rgb(0,0,0)" stroke-opacity="1" fill-opacity="1" font-size="16" font-weight="normal" font-style="normal">
                        <tspan id="graphics-plot-1-left-axis-labels-1.1.4.tspan.1" dy="0" x="0">6000</tspan>
                      </text>
                    </g>
                  </g>
                  <g id="graphics-plot-1-left-axis-labels-1.1.5" transform="translate(55.68, 398.97)" stroke-width="0.1">
                    <g id="graphics-plot-1-left-axis-labels-1.1.5.scale" transform="scale(1, -1)">
                      <text x="0" y="0" id="graphics-plot-1-left-axis-labels-1.1.5.text" transform="rotate(-90)" text-anchor="middle" font-family="Helvetica, Arial, FreeSans, Liberation Sans, Nimbus Sans L, sans-serif" stroke="rgb(0,0,0)" fill="rgb(0,0,0)" stroke-opacity="1" fill-opacity="1" font-size="16" font-weight="normal" font-style="normal">
                        <tspan id="graphics-plot-1-left-axis-labels-1.1.5.tspan.1" dy="0" x="0">8000</tspan>
                      </text>
                    </g>
                  </g>
                  <g id="graphics-plot-1-left-axis-labels-1.1.6" transform="translate(55.68, 470.75)" stroke-width="0.1">
                    <g id="graphics-plot-1-left-axis-labels-1.1.6.scale" transform="scale(1, -1)">
                      <text x="0" y="0" id="graphics-plot-1-left-axis-labels-1.1.6.text" transform="rotate(-90)" text-anchor="middle" font-family="Helvetica, Arial, FreeSans, Liberation Sans, Nimbus Sans L, sans-serif" stroke="rgb(0,0,0)" fill="rgb(0,0,0)" stroke-opacity="1" fill-opacity="1" font-size="16" font-weight="normal" font-style="normal">
                        <tspan id="graphics-plot-1-left-axis-labels-1.1.6.tspan.1" dy="0" x="0">10000</tspan>
                      </text>
                    </g>
                  </g>
                </g>
              </g>
            </g>
          </g>
        </g>
      </g>
      <g id="graphics-root.10">
        <g id="graphics-root::graphics-inner.9">
          <g id="graphics-root::graphics-inner::graphics-figure-1.8">
            <g id="graphics-root::graphics-inner::graphics-figure-1::graphics-plot-1.6">
              <g id="graphics-plot-1-box-1.1">
                <polygon id="graphics-plot-1-box-1.1.1" points="78.72,97.92 820.68,97.92 820.68,474.28 78.72,474.28" stroke="rgb(0,0,0)" stroke-dasharray="none" stroke-width="1" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-linejoin="round" stroke-opacity="1" fill-opacity="0"/>
			<g id = "image">
		  <image x = "78.72" y = "77.92" width = "741.96" height = "376.36" transform="translate(0, 553) scale(1, -1)" xlink:href="/Rplot.png" />
		  	<!--<image xlink:href="Rplot01.png" x = "86.68" y = "70.68" width = "735.65" height = "435.65" transform="translate(0, 553) scale(1, -1)"/> -->
		  </g>
			  </g>
            </g>
          </g>
        </g>
      </g>
      <g id="graphics-root.11">
        <g id="graphics-root::graphics-inner.10">
          <defs>
            <clipPath id="graphics-root::graphics-inner::graphics-figure-1-clip.5.clipPath">
              <rect x="0" y="0" width="861" height="553" fill="none" stroke="none"/>
            </clipPath>
          </defs>
          <g id="graphics-root::graphics-inner::graphics-figure-1-clip.5" clip-path="url(#graphics-root::graphics-inner::graphics-figure-1-clip.5.clipPath)">

            <g id="graphics-root::graphics-inner::graphics-figure-1-clip::graphics-plot-1.4">
              <g id="graphics-plot-1-xlab-1.1">
                <g id="graphics-plot-1-xlab-1.1.1" transform="translate(449.7, 24.96)" stroke-width="0.1">
                  <g id="graphics-plot-1-xlab-1.1.1.scale" transform="scale(1, -1)">
                    <text x="0" y="0" id="graphics-plot-1-xlab-1.1.1.text" text-anchor="middle" font-family="Helvetica, Arial, FreeSans, Liberation Sans, Nimbus Sans L, sans-serif" stroke="rgb(0,0,0)" fill="rgb(0,0,0)" stroke-opacity="1" fill-opacity="1" font-size="16" font-weight="normal" font-style="normal">
                      <tspan id="graphics-plot-1-xlab-1.1.1.tspan.1" dy="0" x="0">weekly_hrs</tspan>
                    </text>
                  </g>
                </g>
              </g>
              <g id="graphics-plot-1-ylab-1.1">
                <g id="graphics-plot-1-ylab-1.1.1" transform="translate(17.28, 286.1)" stroke-width="0.1">
                  <g id="graphics-plot-1-ylab-1.1.1.scale" transform="scale(1, -1)">
                    <text x="0" y="0" id="graphics-plot-1-ylab-1.1.1.text" transform="rotate(-90)" text-anchor="middle" font-family="Helvetica, Arial, FreeSans, Liberation Sans, Nimbus Sans L, sans-serif" stroke="rgb(0,0,0)" fill="rgb(0,0,0)" stroke-opacity="1" fill-opacity="1" font-size="16" font-weight="normal" font-style="normal">
                      <tspan id="graphics-plot-1-ylab-1.1.1.tspan.1" dy="0" x="0">weekly_income</tspan>
                    </text>
                  </g>
                </g>
              </g>
            </g>
          </g>
        </g>
      </g>
    </g>
  </g>
</svg>
